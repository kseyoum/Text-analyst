// Kirubel Seyoum
// ITP 165, Fall 2018
// Homework 08
// kseyoum@usc.edu
// main.cpp
// Homework 8
//
//  Created by Kirubel Seyoum on 10/23/18.
//  Copyright Â© 2018 Kirubel Seyoum. All rights reserved.
//

#include <iostream>
#include <sstream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <fstream>
//Establishes the components of the word comparison function.
struct Word
{
    std::string theWord;
    double standardFrequency;
    int count;
    double ratio;
};
//This funciton is called loadDictionary.
//Function is a void therefore it returns nothing.
//This function holds an array of 5000 words
//The functions purpose is to fill it the array with 5000 dictionary words

void loadDictionary (Word words[])
{
    const int size=5000;
    std::string fileName= "DictSorted.txt";
    std::ifstream fileInput;
    fileInput.open(fileName.c_str());
    int i=0;
        
        while(!fileInput.eof())
        {
            std::string line;
            std::string first;
            double second;
            std::getline(fileInput,line);
            std::stringstream dictword(line);
            dictword >> first;
            dictword >> second;
            Word toAdd;
            toAdd.theWord = first;
            toAdd.standardFrequency = second;
            words[i]=toAdd;
            i++;
        }
}
//This funciton is called initDictionary.
//Function is a void therefore it returns nothing.
//This function holds an array of 5000 words
//The functions purpose is to get the dictionary ready to be counted by setting count to 0.
void initDictionary (Word words[])
{
    const int size=5000;
    for (int i=0; i<size; i++)
    {
        words[i].count=0;
    }
}

//This funciton is called cleanWord.
//Function is a string function therefore it returns a word cleaned of punctuation put into lowercase.
//This function holds the string that holds words from the text.
//The functions purpose is to rid the string of punctation and make it lowercase.
std::string cleanWord (std::string cases)
{
    std::string cleanWord;
    char punctation[]=".,?!/;:@#$%^&*()+-<=>";
    for(int a=0; a<cases.length(); a++)
    {
        for (int b=0; b<21; b++)
        {
            if (cases[a]==punctation[b])
            {
                cases.erase(a);
            }
        }
        cleanWord=cases;
    }
    int slength=(int)(cleanWord.length());
    for (int i=0; i<slength; i++)
    {
        cleanWord[i]=tolower(cases[i]);
    }
return cleanWord;
}

//This funciton is called countWord.
//Function is a bool therefore it returns a true or false statement.
//This function holds an array of 5000 words and the string that holds words from the text.
//The functions purpose is to count how many times the dictionary word reoccurs in the aticle.

bool countWord (Word words[],std::string cases)
{
    const int size=5000;
    for (int i=0; i<size;i++)
    {
        if (words[i].theWord.compare(cases)==0)
        {
            words[i].count++;
            return true;
        }
    }
    
return false;
}

//This funciton is called computeLocal.
//Function is a void therefore it returns nothing.
//This function holds an array of 5000 words and the string that holds words from the text.
//The functions purpose is to compute the usage ratio of each word

void computeLocal (Word words[])
{

const int size=5000;
    for (int i=0; i<size; i++)
    {
        words[i].ratio=words[i].count/words[i].standardFrequency;
    }

}

//This funciton is called maxWord.
//Function is a string therefore it returns a string that is most reoccuring in the text.
//This function holds an array of 5000 words
//The functions purpose is to calculate which word is used the most.

std::string maxWord (Word words[])
{
    const int size=5000;
    int count=0;
    int maxValue;
    for (int i=0; i<size; i++)
    {
        if (words[i].ratio>words[i+1].ratio)
        {
            maxValue=words[i].ratio;
            count=i;
        }
    }
    return words[count].theWord;
}

//This funciton is called printTop25.
//Function is a void therefore it returns nothing.
//This function holds an array of 5000 words
//The functions purpose is to print the top 25 words that are used the most.

void printTop25 (Word words[])
{
const int size=5000;
int count=0;
    for (int i=0;i<size;i++)
    {
        std::cout<< i << maxWord(words) << "/n";
        words[i].count=-1;
    }

}



int main(int argc, const char * argv[])
{
     const int size= 5000; Word* words=new Word[size];
     std::string line;
     std::string fileName;
    do
    {
        std::cout << "enter filename to do gloss ('quit' to quit): ";
        //Gets user input
        std::cin>> fileName;
        std::string line;
        //Opens user file and scans lines using a getline
    
        
        if (fileName== "quit")
        {
            
            return 0;
        }
        else
        {
            loadDictionary(words);
            initDictionary(words);
            std::ifstream fileInput(fileName.c_str());
            std::getline(fileInput,line);
            std::stringstream fword(line);
            
            if (fileInput.is_open())
            {
                while(!fileInput.eof())
                {
                    std::string temp;
                    fileInput>>temp;
                    countWord(words, cleanWord(temp));
                }
                computeLocal(words);
                printTop25(words);
            }
            else
                std::cout<< "File not found.\n";
            fileInput.close();
        }
        }while(fileName!="quit");
        delete[] words;
        return 0;
    
}
    
